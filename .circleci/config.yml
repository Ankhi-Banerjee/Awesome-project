version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "hello error"
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            if curl -s --head "udapeople-kk1j287dhjppmz438" 
            then
               return SUCCESS = 1
            else
              return SUCCESS = 0
            fi
            
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            cd backend
            npm run migrations:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm run build
             cd dist
             ls
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm run test
      - store_test_results:
          path: test-results
            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm run test
      - store_test_results:
          path: test-results
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      -checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=tag v1.0 \
              --stack-name "UdaPeople backend stack udapeople-kk1j287dhjppmz438" \
              --parameter-overrides ID="Udapeople-kk1j287dhjppmz438"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=tag v2.0 \
              --stack-name "UdaPeople frontend stack udapeople-kk1j287dhjppmz438" \
              --parameter-overrides ID="udapeople-kk1j287dhjppmz438"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > inventory
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
   
      - name: "update apt packages."
        become: yes
        apt:
          update_cache: yes

      - name: "upgrade packages"
        become: yes
        apt:
          upgrade: yes

      - name: remove dependencies that are no longer required
        become: yes
        apt:
          autoremove: yes

      - name: "install dependencies."
        become: yes
        apt:
          name: ["nodejs", "npm"]
          state: latest
          update_cache: yes

      - name: "install pm2"
        become: yes
        npm:
          name: pm2
          global: yes
          production: yes
          state: present

      - name: Creates directory
        file:
          path: ~/web
          state: directory

      - name: Copy index test page
        template:
          src: "files/index.js"
          dest: "~/web/index.js"

      - name: Executing node
        shell: |
          pm2 start ~/web/index.js -f      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      -checkout
      add_ssh_keys:
          fingerprints: ["5e:91:c8:56:42:35:11:a5:3e:42:c3:1c:41:a4:96:68:b0:dd:4d:98"]
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            exit 1
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt playbook.yml
            exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -checkout
      - run:
          name: Run migrations
          command: |
            -  run: npm run test
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            -  run: npm run test
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      -checkout
      - run:
          name: Install dependencies
          command: |
            -  run: npm run test
      - run:
          name: Get backend url
          command: |
            -  run: npm run test
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            -  run: npm run test
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      -checkout
      add_ssh_keys:
          fingerprints: ["5e:91:c8:56:42:35:11:a5:3e:42:c3:1c:41:a4:96:68:b0:dd:4d:98"]
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
      - run:
          name: Install dependencies
          command: |
            -  run: npm run test
      - run:
          name: Deploy backend
          command: |
            -  run: npm run test
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      -checkout
      - run:
          name: Install dependencies
          command: |
            - run: apk add --update curl
      - run:
          name: Get backend url
          command: |
            URL="https://blog.udacity.com/"
            if curl -s --head ${URL} # test if blog.udacity. com exists
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            - run: npm run test
      - run:
          name: Frontend smoke test.
          command: |
            -  run: npm run test 
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      -checkout
      - run:
          name: Install dependencies
          command: |
            -  run: npm run test
      - run:
          name: Update cloudfront distribution
          command: |
            WebpageCDN:
            Type: AWS::CloudFront::Distribution
            Properties:
              DistributionConfig:
                Origins:
                  - DomainName: !Sub "udapeople-${udapeople-kk1j287dhjppmz438}.s3.amazonaws.com"
                    Id: webpage
                    S3OriginConfig:
                      OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
                Enabled: True
                DefaultRootObject: index.html
                DefaultCacheBehavior:
                  ForwardedValues:
                    QueryString: False
                  TargetOriginId: webpage
                  ViewerProtocolPolicy: allow-all
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps:
      -checkout
      - run:
          name: Get old stack workflow id
          command: |
            echo "${New}"
            export OldWorkflowID={"New"}
            export STACKS=["${New}"] 
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${New}" ]]
            then
              remove "${New}" 
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
